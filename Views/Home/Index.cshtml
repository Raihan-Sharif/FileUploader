@{
    ViewData["Title"] = "Home Page";
}
@*<link rel="stylesheet" href="~/css/uploader.css">


<div id="drop-zone" class="drop-zone">
    Drop files here to upload
</div>

<div id="progress-bar" class="progress-bar" style="display: none;">
    <div class="progress-bar-fill"></div>
</div>

<form id="upload-form" >
    <input type="file" name="file" multiple>
    <button type="submit">Upload</button>
</form>*@


@*
<div id="wrapper">
    <div id="uploader">
        <div class="title">
            <h2>UPLOAD FORM</h2><h2><span class="close"><i class="icon-off"></i></span></h2>
        </div>
        <div class="body">
            <div class="dropzone"><i class="icon-cloud-upload"></i> Drop Here</div>
            <div class="list">
                <ul>
                    <li><i class="icon-file-alt"></i>index.html <span class="cancel"><i class="icon-minus-sign"></i></span></li>
                    <li><i class="icon-file-alt"></i>style.css <span class="cancel"><i class="icon-minus-sign"></i></span></li>
                    <li><i class="icon-file-alt"></i>jquery.js <span class="cancel"><i class="icon-minus-sign"></i></span></li>
                    <li><i class="icon-file-alt"></i>logo.png <span class="cancel"><i class="icon-minus-sign"></i></span></li>
                    <li><i class="icon-file-alt"></i>logo.png <span class="cancel"><i class="icon-minus-sign"></i></span></li>
                </ul>
            </div>
            <div class="progress">
                <div class="bar"></div>
                <div class="tip">50%</div>
            </div>
        </div>
    </div>
</div>
*@

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet" />


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />

<style>
    .footer {
        position: absolute !important;
    }

</style>


@*<div class="container-fluid">
	<input type="file" id="file" />
	<button id="upload">Upload</button>
	<div id="progress">
		<div id="bar"></div>
	</div>
	<div>
		<img id="image-preview" />
	</div>
	<div id="errorContainer">
	</div>
</div>
*@


<!--begin::Global Stylesheets Bundle(used by all pages)-->
<link href="assets/plugins/global/plugins.bundle.css" rel="stylesheet" type="text/css" />
<link href="assets/css/style.bundle.css" rel="stylesheet" type="text/css" />
<!--end::Global Stylesheets Bundle-->
<!--begin::Main-->
<!--begin::Root-->
<div class="d-flex flex-column flex-root">
    <!--begin::Page-->
    <div class="page d-flex flex-row flex-column-fluid">
        <!--begin::Wrapper-->
        <div class="wrapper d-flex flex-column flex-row-fluid" id="kt_wrapper">

            <!--begin::Toolbar-->
            <div class="toolbar mb-5" id="kt_toolbar">
                <!--begin::Container-->
                <div id="kt_toolbar_container" class="container-fluid d-flex flex-stack">
                    <!--begin::Page title-->
                    <div data-kt-swapper="true" data-kt-swapper-mode="prepend" data-kt-swapper-parent="{default: '#kt_content_container', 'lg': '#kt_toolbar_container'}" class="page-title d-flex align-items-center flex-wrap me-3 mb-5 mb-lg-0">
                        <!--begin::Title-->
                        <h1 class="d-flex align-items-center text-dark fw-bolder fs-3 my-1">

                            File Uploader
                            <!--begin::Separator-->
                            <span class="h-20px border-gray-200 border-start ms-3 mx-2"></span>
                            <!--end::Separator-->
                            <!--begin::Description-->
                            <small class="text-muted fs-7 fw-bold my-1 ms-1">#Raihan</small>
                            <!--end::Description-->

                        </h1>
                        <!--end::Title-->
                    </div>
                    <!--end::Page title-->
                </div>
                <!--end::Container-->
            </div>
            <!--end::Toolbar-->
            <!--begin::Container-->
            <div id="kt_content_container" class="container-xxl">
                <!--begin::Row-->
                <div class="row gy-5 g-xl-8">
                    <!--begin::Col-->
                    <div class="col-xl-4">
                        <!--begin::List Widget 3-->
                        <div class="card card-xl-stretch mb-xl-8">
                            <!--begin::Header-->
                            <div class="card-header border-0">
                                <h3 class="card-title fw-bolder text-dark">Uploader</h3>
                                <div class="card-toolbar">
                                </div>
                            </div>
                            <!--end::Header-->
                            <!--begin::Body-->
                            <div class="card-body pt-2">
                                <!--begin::wrapper-->
                                <input type="file" id="fileInput" />
                                <div id="progress">
                                    <div id="bar"></div>
                                </div>
                                <div>
                                    <img id="image-preview" />
                                </div>
                                <div id="errorContainer">
                                </div>
                                <!--end::wrapper-->

                            </div>
                            <!--end::Body-->
                        </div>
                        <!--end:List Widget 3-->
                    </div>
                    <!--end::Col-->
                    <!--begin::Col-->
                    <div class="col-xl-8">
                        <!--begin::Tables Widget 9-->
                        <div class="card card-xl-stretch mb-5 mb-xl-8">
                            <!--begin::Header-->
                            <div class="card-header border-0 pt-5">
                                <h3 class="card-title align-items-start flex-column">
                                    <span class="card-label fw-bolder fs-3 mb-1">Files Statistics</span>
                                    <span class="text-muted mt-1 fw-bold fs-7">Your selected files will show here.</span>
                                </h3>
                                <div class="card-toolbar" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-trigger="hover" title="Click to upload files">
                                    <button id="uploadBtn" href="#" class="btn btn-sm btn-light btn-active-primary" disabled>
                                        <!--begin::Svg Icon | path: icons/duotune/arrows/arr075.svg-->
                                        <span class="svg-icon svg-icon-3">
                                            <svg fill="#000000" height="200px" width="200px" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 490.955 490.955" xml:space="preserve"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path id="XMLID_448_" d="M445.767,308.42l-53.374-76.49v-20.656v-11.366V97.241c0-6.669-2.604-12.94-7.318-17.645L312.787,7.301 C308.073,2.588,301.796,0,295.149,0H77.597C54.161,0,35.103,19.066,35.103,42.494V425.68c0,23.427,19.059,42.494,42.494,42.494 h159.307h39.714c1.902,2.54,3.915,5,6.232,7.205c10.033,9.593,23.547,15.576,38.501,15.576c26.935,0-1.247,0,34.363,0 c14.936,0,28.483-5.982,38.517-15.576c11.693-11.159,17.348-25.825,17.348-40.29v-40.06c16.216-3.418,30.114-13.866,37.91-28.811 C459.151,347.704,457.731,325.554,445.767,308.42z M170.095,414.872H87.422V53.302h175.681v46.752 c0,16.655,13.547,30.209,30.209,30.209h46.76v66.377h-0.255v0.039c-17.685-0.415-35.529,7.285-46.934,23.46l-61.586,88.28 c-11.965,17.134-13.387,39.284-3.722,57.799c7.795,14.945,21.692,25.393,37.91,28.811v19.842h-10.29H170.095z M410.316,345.771 c-2.03,3.866-5.99,6.271-10.337,6.271h-0.016h-32.575v83.048c0,6.437-5.239,11.662-11.659,11.662h-0.017H321.35h-0.017 c-6.423,0-11.662-5.225-11.662-11.662v-83.048h-32.574h-0.016c-4.346,0-8.308-2.405-10.336-6.271 c-2.012-3.866-1.725-8.49,0.783-12.07l61.424-88.064c2.189-3.123,5.769-4.984,9.57-4.984h0.017c3.802,0,7.38,1.861,9.568,4.984 l61.427,88.064C412.04,337.28,412.328,341.905,410.316,345.771z"></path> </g></svg>
                                        </span>
                                        <!--end::Svg Icon-->Upload
                                    </button>
                                </div>
                            </div>
                            <!--end::Header-->
                            <!--begin::Body-->
                            <div class="card-body py-3">
                                <!--begin::Table container-->
                                <div class="table-responsive">
                                    <!--begin::Table-->
                                    <table id="filesTable" class="table table-row-dashed table-row-gray-300 align-middle gs-0 gy-4">
                                        <!--begin::Table head-->
                                        <thead>
                                            <tr class="fw-bolder text-muted">
                                                <th class="w-25px">
                                                    <div class="form-check form-check-sm form-check-custom form-check-solid">
                                                        <input class="form-check-input" type="checkbox" value="1" data-kt-check="true" data-kt-check-target=".widget-9-check" />
                                                    </div>
                                                </th>
                                                <th class="min-w-150px">Files</th>
                                                <th class="min-w-140px">Type & Dimension</th>
                                                <th class="min-w-120px">Upload Status</th>
                                                <th class="min-w-100px text-end">Actions</th>
                                            </tr>
                                        </thead>
                                        <!--end::Table head-->
                                        <!--begin::Table body-->
                                        <tbody id="filesTableBody">
                                        </tbody>
                                        <!--end::Table body-->
                                    </table>
                                    <!--end::Table-->
                                </div>
                                <!--end::Table container-->
                            </div>
                            <!--begin::Body-->
                        </div>
                        <!--end::Tables Widget 9-->
                    </div>
                    <!--end::Col-->
                </div>
                <!--end::Row-->
            </div>
            <!--begin::Container-->
        </div>
        <!--end::Wrapper-->

    </div>
    <!--end::Page-->
</div>
<!--end::Main-->
<!--end::Root-->
<!--begin::Global Javascript Bundle(used by all pages)-->
<script src="assets/plugins/global/plugins.bundle.js"></script>
<script src="assets/js/scripts.bundle.js"></script>
<!--end::Global Javascript Bundle-->




<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
<script>
    let selectedFiles = {};
    $(document).ready(function() {
        var cropper = null;
        // Initialize an empty object to store the selected files with their unique keys
        
        $('#fileInput').on('change', function() {
            // Check if a file has been selected
            if (this.files && this.files[0]) {

                const file = document.getElementById("fileInput").files[0];
                const fileName = file.name.split('.')[0];
                const fileSize = getFileSize(file);
                const fileType = getFileType(file);
                const fileSource = URL.createObjectURL(file);
                var imgDimension = '';
                // Generate a unique key for the file
                const uniqueKey = generateUniqueKey();
                if (isImage(this.files[0])) {

                    getImageSize(fileSource)
                        .then(size => {
                            imgWidthPx = size.width + 'px';
                            imgHeightPx = size.height + 'px';

                            imgDimension = 'Width: ' + imgWidthPx + ' Height: ' + imgHeightPx;
                            // Call any functions that depend on the image size here
                            generateNewRow(fileSource, fileName, fileType, fileSize, imgDimension, uniqueKey);
                            // Now Enable upload button to upload the files.
                            document.getElementById("uploadBtn").disabled = false;

                        })
                        .catch(err => {
                            console.error(err);
                        });
                }
                else {
                    generateNewRow(fileSource, fileName, fileType, fileSize, imgDimension, uniqueKey);
                }


                // Add the file to the selectedFiles object with its unique key
                selectedFiles[uniqueKey] = this.files[0];

                // Get the table element and its tbody
                const tbody = document.getElementById("filesTableBody");
                // Check if tbody has any rows
                if (tbody.rows.length > 0) {
                    // If there are rows, enable the upload button
                    document.getElementById("uploadBtn").disabled = false;
                } else {
                    // If there are no rows, disable the upload button
                    document.getElementById("uploadBtn").disabled = true;
                }



                //// Get the selected files and add them to the selectedFiles object
                //const files = event.target.files;
                //for (let i = 0; i < files.length; i++) {
                //    // Generate a unique key for the file
                //    const uniqueKey = generateUniqueKey();
                //    // Add the file to the selectedFiles object with its unique key
                //    selectedFiles[uniqueKey] = files[i];
                //}
            }
        });

        $('#uploadBtn').on('click', function() {
            if (cropper) {

                console.log("cropped is not null.");

                // Get the cropped image data
                var canvas = cropper.getCroppedCanvas({
                    width: 200,
                    height: 200
                });
                canvas.toBlob(function(blob) {
                    // Create a FormData object and add the cropped image file to it
                    var formData = new FormData();
                    formData.append('file', blob, 'cropped.jpg');
                    uploadData(formData);
                });
            }
            else {
                console.log("cropped is null.");


                // Loop through the selectedFiles object and get the individual files
                for (const key in selectedFiles) {
                    const file = selectedFiles[key];
                    console.log(`File name: ${file.name}, File type: ${file.type}, File size: ${file.size}`);

                    var formData = new FormData();
                    formData.append("file", file);

                    uploadData(formData);
                }


                //var fileInput = $('#file');
                //var selectedFile = fileInput[0].files[0];

                //var formData = new FormData();
                //formData.append("file", selectedFile);

                //uploadData(formData);


            }
        });
    });

    // this funciton for post data to server.
    function uploadData(formData) {
        console.log('uploadData Called.', formData);
        // Create a progress bar and add it to the page
        var progressBar = $('<div class="progress-bar"></div>').appendTo($('#bar'));

        // Send the file to the server using AJAX
        $.ajax({
            url: '/api/File/Upload',
            type: 'POST',
            data: formData,
            headers: { "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val() },
            cache: false,
            contentType: false,
            processData: false,
            xhr: function() {
                var xhr = new window.XMLHttpRequest();
                xhr.upload.addEventListener('progress', function(evt) {
                    console.log("progress called");
                    if (evt.lengthComputable) {
                        console.log("progress lengthComputable");

                        var percentComplete = evt.loaded / evt.total;
                        progressBar.width(percentComplete * 100 + '%');
                    }
                }, false);
                return xhr;
            },
            success: function(data, textStatus, jqXHR) {
                //alert('File uploaded successfully. URL: ' + response.url)
                if (textStatus == 'success') {
                    var errorTitle = 'File uploaded successfully';
                    sendAlert('success', errorTitle);
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                var errorTitle = jqXHR.responseJSON.title;
                sendAlert('danger', errorTitle);
            }
        });
    }

    function isImage(file) {
        // Check if the file type starts with "image/"
        return file.type.startsWith("image/");
    }
    function sendAlert(alertType, msg) {
        var alertElement = '<div class="alert alert-' + alertType + ' alert-dismissible fade show" role="alert">' +
            msg + '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
            '<span aria-hidden="true">&times;</span>' +
            '</button>' +
            '</div>';

        $('#errorContainer').append(alertElement);
    }

    // Delete File berfore submit to server by user.
    function deleteFile(callingObject) {
        // Get the tag name of the calling object
        const tagName = callingObject.tagName;

        // Get the ID of the calling object
        const id = callingObject.id;

        // Get the text content of the calling object
        const textContent = callingObject.textContent;



        var row = $(callingObject).closest('tr');
        var imgSrc = $(row).find('img').attr('src');

        alert('File deleted: ' + imgSrc);

        $(row).remove();

        // file delete form array
        if (getFileByKey(id.replace("delete_", ""))) {
            deleteFileByKey(id.replace("delete_", ""))
        }
        else {
            console.log('file Key: ', id.replace("delete_", ""));
            sendAlert('danger', "File not found to delete!");
        }

        // Log the details to the console
        console.log(`Tag name: ${tagName}`);
        console.log(`ID: ${id}`);
        console.log(`Text content: ${textContent}`);
        console.log(`imgSrc: ${imgSrc}`);


        // Get the table element and its tbody
        const tbody = document.getElementById("filesTableBody");

        // Check if tbody has any rows
        if (tbody.rows.length > 0) {
            // If there are rows, enable the upload button
            document.getElementById("uploadBtn").disabled = false;
        } else {
            // If there are no rows, disable the upload button
            document.getElementById("uploadBtn").disabled = true;
        }

    }

    function getFileSize(file) {
        var fileSizeInBytes = file.size;
        var fileSizeInKB = fileSizeInBytes / 1024;
        if (fileSizeInKB < 1024) {
            return fileSizeInKB.toFixed(2) + ' KB';
        } else {
            var fileSizeInMB = fileSizeInKB / 1024;
            return fileSizeInMB.toFixed(2) + ' MB';
        }
    }

    function getFileType(file) {
        const type = file.type;
        if (type.startsWith('image/')) {
            return 'image';
        } else if (type.startsWith('video/')) {
            return 'video';
        } else if (type.startsWith('audio/')) {
            return 'audio';
        } else if (type.startsWith('application/pdf')) {
            return 'pdf';
        } else if (type.startsWith('application/msword') || type.startsWith('application/vnd.openxmlformats-officedocument.wordprocessingml.document')) {
            return 'word';
        } else if (type.startsWith('application/vnd.ms-excel') || type.startsWith('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')) {
            return 'excel';
        } else if (type.startsWith('application/vnd.ms-powerpoint') || type.startsWith('application/vnd.openxmlformats-officedocument.presentationml.presentation')) {
            return 'powerpoint';
        } else if (type.startsWith('text/')) {
            return 'text';
        } else {
            return 'other';
        }
    }

    function getImageSize(fileSource) {
        return new Promise((resolve, reject) => {
            const img = new Image();
            img.onload = () => {
                const size = {
                    width: img.width,
                    height: img.height,
                };
                resolve(size);
            };
            img.onerror = reject;
            img.src = fileSource;
        });
    }

    function generateNewRow(fileSource, fileName, fileType, fileSize, imgDimension, uniqueKey) {

        // Get the table body element by ID
        var tableBody = $("#filesTable tbody");

        // Your prepared string row
        var newRow = '<tr>' +
            '<td>' +
            '    <div class="form-check form-check-sm form-check-custom form-check-solid">' +
            '        <input class="form-check-input widget-9-check" type="checkbox" value="1" />' +
            '    </div>' +
            '</td>' +
            '<td>' +
            '    <div class="d-flex align-items-center">' +
            '        <div class="symbol symbol-45px me-5">' +
            '            <img src="' + fileSource + '" alt="" />' +
            '            <input type="file" class="fileInpList" value="' + fileSource + '" hidden >' +
            '        </div>' +
            '        <div class="d-flex justify-content-start flex-column">' +
            '            <span class="text-dark fw-bolder text-hover-primary fs-6">' + fileName + '</span>' +
            '            <span class="text-muted fw-bold text-muted d-block fs-7">' + fileSize + '</span>' +
            '        </div>' +
            '    </div>' +
            '</td>' +
            '<td>' +
            '    <span class="text-dark fw-bolder text-hover-primary d-block fs-6">' + fileType + '</span>' +
            '    <span class="text-muted fw-bold text-muted d-block fs-7">' + imgDimension + '</span>' +
            '</td>' +
            '<td class="text-end">' +
            '    <div class="d-flex flex-column w-100 me-2">' +
            '        <div class="d-flex flex-stack mb-2">' +
            '            <span class="text-muted me-2 fs-7 fw-bold" progress-text>0%</span>' +
            '        </div>' +
            '        <div class="progress h-6px w-100">' +
            '            <div class="progress-bar bg-success" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>' +
            '        </div>' +
            '    </div>' +
            '</td>' +
            '<td>' +
            '    <div class="d-flex justify-content-end flex-shrink-0">' +
            '        <a href="#" class="btn btn-icon btn-bg-light btn-active-color-primary btn-sm me-1">' +
            '            <!--begin::Svg Icon | path: icons/duotune/art/art005.svg-->' +
            '            <span class="svg-icon svg-icon-3">' +

            '               <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="#7d7e82"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M21 22H3C2.59 22 2.25 21.66 2.25 21.25C2.25 20.84 2.59 20.5 3 20.5H21C21.41 20.5 21.75 20.84 21.75 21.25C21.75 21.66 21.41 22 21 22Z" fill="#f7ab08"></path> <path d="M19.0206 3.48162C17.0806 1.54162 15.1806 1.49162 13.1906 3.48162L11.9806 4.69162C11.8806 4.79162 11.8406 4.95162 11.8806 5.09162C12.6406 7.74162 14.7606 9.86162 17.4106 10.6216C17.4506 10.6316 17.4906 10.6416 17.5306 10.6416C17.6406 10.6416 17.7406 10.6016 17.8206 10.5216L19.0206 9.31162C20.0106 8.33162 20.4906 7.38162 20.4906 6.42162C20.5006 5.43162 20.0206 4.47162 19.0206 3.48162Z" fill="#f7ab08"></path> <path d="M15.6103 11.5308C15.3203 11.3908 15.0403 11.2508 14.7703 11.0908C14.5503 10.9608 14.3403 10.8208 14.1303 10.6708C13.9603 10.5608 13.7603 10.4008 13.5703 10.2408C13.5503 10.2308 13.4803 10.1708 13.4003 10.0908C13.0703 9.81078 12.7003 9.45078 12.3703 9.05078C12.3403 9.03078 12.2903 8.96078 12.2203 8.87078C12.1203 8.75078 11.9503 8.55078 11.8003 8.32078C11.6803 8.17078 11.5403 7.95078 11.4103 7.73078C11.2503 7.46078 11.1103 7.19078 10.9703 6.91078C10.9491 6.86539 10.9286 6.82022 10.9088 6.77532C10.7612 6.442 10.3265 6.34455 10.0688 6.60231L4.34032 12.3308C4.21032 12.4608 4.09032 12.7108 4.06032 12.8808L3.52032 16.7108C3.42032 17.3908 3.61032 18.0308 4.03032 18.4608C4.39032 18.8108 4.89032 19.0008 5.43032 19.0008C5.55032 19.0008 5.67032 18.9908 5.79032 18.9708L9.63032 18.4308C9.81032 18.4008 10.0603 18.2808 10.1803 18.1508L15.9016 12.4295C16.1612 12.1699 16.0633 11.7245 15.7257 11.5804C15.6877 11.5642 15.6492 11.5476 15.6103 11.5308Z" fill="#f7ab08"></path> </g></svg>' +

            '            </span>' +
            '            <!--end::Svg Icon-->' +
            '        </a>' +
            '        <button id="delete_' + uniqueKey + '" class="btn btn-icon btn-bg-light btn-active-color-primary btn-sm" onclick="deleteFile(this)">' +
            '            <!--begin::Svg Icon | path: icons/duotune/general/gen027.svg-->' +
            '            <span class="svg-icon svg-icon-3">' +
            '                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">' +
            '                <path d="M5 9C5 8.44772 5.44772 8 6 8H18C18.5523 8 19 8.44772 19 9V18C19 19.6569 17.6569 21 16 21H8C6.34315 21 5 19.6569 5 18V9Z" fill = "black" />' +

            '                  <path opacity="0.5" d = "M5 5C5 4.44772 5.44772 4 6 4H18C18.5523 4 19 4.44772 19 5V5C19 5.55228 18.5523 6 18 6H6C5.44772 6 5 5.55228 5 5V5Z" fill = "black" />' +
            '                  <path opacity="0.5" d = "M9 4C9 3.44772 9.44772 3 10 3H14C14.5523 3 15 3.44772 15 4V4H9V4Z" fill = "black" />' +
            '                </svg>' +
            '            </span>' +
            '            <!--end::Svg Icon-->' +
            '        </button>' +
            '    </div>' +
            '</td>' +
            '</tr>';

        // Append the new row to the table body
        tableBody.append(newRow);

    }

    function getCurTimeString() {
        const now = new Date();
        const hour = now.getHours().toString().padStart(2, '0');
        const minute = now.getMinutes().toString().padStart(2, '0');
        const second = now.getSeconds().toString().padStart(2, '0');

        const timeString = hour + minute + second;
        return timeString;
    }




    // Function to generate a unique key for the file
    function generateUniqueKey() {
        // Generate a random string using Math.random() and convert it to base 36
        const randomString = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
        // Combine the current timestamp and the random string to create the unique key
        const uniqueKey = `file_${new Date().getTime()}_${randomString}`;
        return uniqueKey;
    }

    // Function to get a file by its unique key
    function getFileByKey(key) {
        console.log('selectedFiles: ', selectedFiles);

        console.log('key: ',key);

        return selectedFiles[key];
    }

    // Function to delete a file by its unique key
    function deleteFileByKey(key) {
        delete selectedFiles[key];
    }


</script>




@*<script>
    const dropZone = document.getElementById('drop-zone');
    const progressBar = document.getElementById('progress-bar');
    const progressBarFill = progressBar.querySelector('.progress-bar-fill');
    const uploadForm = document.getElementById('upload-form');

    dropZone.addEventListener('dragover', e => {
      e.preventDefault();
      dropZone.classList.add('drag-over');
    });

    dropZone.addEventListener('dragleave', e => {
      e.preventDefault();
      dropZone.classList.remove('drag-over');
    });

    dropZone.addEventListener('drop', e => {
      e.preventDefault();
      dropZone.classList.remove('drag-over');
      const files = Array.from(e.dataTransfer.files);
      handleFiles(files);
    });

    uploadForm.addEventListener('submit', e => {
      e.preventDefault();
      const files = Array.from(uploadForm.elements.file.files);
      handleFiles(files);
    });

    function handleFiles(files) {
      if (files.length === 0) return;

      progressBar.style.display = 'block';
      progressBarFill.style.width = '0%';

      const formData = new FormData();
      files.forEach(file => {
        formData.append('file', file);
      });

      fetch('/file/upload', {
        method: 'POST',
        body: formData,
        headers: {
          'Accept': 'application/json'
        },
        onUploadProgress: progressEvent => {
          const progressPercent = (progressEvent.loaded / progressEvent.total) * 100;
          progressBarFill.style.width = `${progressPercent}%`;
        }
      })
      .then(response => response.json())
      .then(data => {
        progressBar.style.display = 'none';
        if (data.editUrl) {
          // Redirect to the image editing UI
          window.location.href = data.editUrl;
        } else {
          // Handle uploaded file
          console.log('Uploaded file:', data.filePath);
        }
      })
      .catch(error => {
        progressBar.style.display = 'none';
        console.error('Error uploading file:', error);
      });
    }
</script>*@

